/**
 * Malloc
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

typedef struct _metadata_t {
  unsigned int size;
  unsigned char isUsed;
  struct _metadata_t *next;
} metadata_t;

void *startOfHeap = NULL;

typedef struct _list_t {
  struct _metadata_t *node;
  struct _list_t *next;
} list_t;

list_t *head = NULL;

/**
 * Allocate space for array in memory
 *
 * Allocates a block of memory for an array of num elements, each of them size
 * bytes long, and initializes all its bits to zero. The effective result is
 * the allocation of an zero-initialized memory block of (num * size) bytes.
 *
 * @param num
 *    Number of elements to be allocated.
 * @param size
 *    Size of elements.
 *
 * @return
 *    A pointer to the memory block allocated by the function.
 *
 *    The type of this pointer is always void*, which can be cast to the
 *    desired type of data pointer in order to be dereferenceable.
 *
 *    If the function failed to allocate the requested block of memory, a
 *    NULL pointer is returned.
 *
 * @see http://www.cplusplus.com/reference/clibrary/cstdlib/calloc/
 */
void *calloc(size_t num, size_t size) {
  // implement calloc:
  void *ptr = malloc(num * size);
  memset(ptr, 0, num * size);
  return ptr;
}


/**
 * Allocate memory block
 *
 * Allocates a block of size bytes of memory, returning a pointer to the
 * beginning of the block.  The content of the newly allocated block of
 * memory is not initialized, remaining with indeterminate values.
 *
 * @param size
 *    Size of the memory block, in bytes.
 *
 * @return
 *    On success, a pointer to the memory block allocated by the function.
 *
 *    The type of this pointer is always void*, which can be cast to the
 *    desired type of data pointer in order to be dereferenceable.
 *
 *    If the function failed to allocate the requested block of memory,
 *    a null pointer is returned.
 *
 * @see http://www.cplusplus.com/reference/clibrary/cstdlib/malloc/
 */
void *malloc(size_t size) {
  // implement malloc:

  printf("Malloc: %ld\n", size);

  if (startOfHeap == NULL) {
    startOfHeap = sbrk(0);
  }

  if (startOfHeap != sbrk(0)) {
    metadata_t *curMeta = startOfHeap;
    metadata_t *prev = curMeta;
    while(curMeta != NULL) {
      if (curMeta->isUsed == 0 && curMeta->size == size) {
        curMeta->isUsed = 1;
        prev->next = curMeta->next;
        if (curMeta != startOfHeap) {
          curMeta->next = NULL;
        }
        curMeta = startOfHeap;
        void *endOfHeap = sbrk(0);
        printf("-- Start of Heap (%p) --\n", startOfHeap);
        while ((void *)curMeta < endOfHeap) {   // While we're before the end of the heap...
          printf("metadata for memory %p: (%p, size=%d, isUsed=%d)\n", (void *)curMeta + sizeof(metadata_t), curMeta, curMeta->size, curMeta->isUsed);
          curMeta = (void *)curMeta + curMeta->size + sizeof(metadata_t);
        }
        printf("-- End of Heap (%p) --\n\n", endOfHeap);
        return (void *)curMeta + sizeof(metadata_t);
      } else if (curMeta->isUsed == 0 && curMeta->size > size) {
        curMeta->isUsed = 1;
        prev->next = curMeta->next;
        if (curMeta->size > size + sizeof(metadata_t)) {
          metadata_t *block_split = (void *)curMeta + sizeof(metadata_t) + size;
          block_split->isUsed = 0;
          block_split->size = curMeta->size - size - sizeof(metadata_t);
          block_split->next = curMeta->next;
          curMeta->size = size;
          prev->next = block_split;
        }
        if (curMeta != startOfHeap) {
          curMeta->next = NULL;
        }
        curMeta = startOfHeap;
        void *endOfHeap = sbrk(0);
        printf("-- Start of Heap (%p) --\n", startOfHeap);
        while ((void *)curMeta < endOfHeap) {   // While we're before the end of the heap...
          printf("metadata for memory %p: (%p, size=%d, isUsed=%d)\n", (void *)curMeta + sizeof(metadata_t), curMeta, curMeta->size, curMeta->isUsed);
          curMeta = (void *)curMeta + curMeta->size + sizeof(metadata_t);
        }
        printf("-- End of Heap (%p) --\n\n", endOfHeap);
        return (void *)curMeta + sizeof(metadata_t);
      }
      prev = curMeta;
      curMeta = curMeta->next;
    }
  }

  metadata_t *meta = sbrk(sizeof(metadata_t));
  meta->size = size;
  meta->isUsed = 1;
  meta->next = NULL;

  void *ptr = sbrk(size);

  metadata_t *curMeta = startOfHeap;
  void *endOfHeap = sbrk(0);
  printf("-- Start of Heap (%p) --\n", startOfHeap);
  while ((void *)curMeta < endOfHeap) {   // While we're before the end of the heap...
    printf("metadata for memory %p: (%p, size=%d, isUsed=%d)\n", (void *)curMeta + sizeof(metadata_t), curMeta, curMeta->size, curMeta->isUsed);
    curMeta = (void *)curMeta + curMeta->size + sizeof(metadata_t);
  }
  printf("-- End of Heap (%p) --\n\n", endOfHeap);

  return ptr;
}

/**
 * Deallocate space in memory
 *
 * A block of memory previously allocated using a call to malloc(),
 * calloc() or realloc() is deallocated, making it available again for
 * further allocations.
 *
 * Notice that this function leaves the value of ptr unchanged, hence
 * it still points to the same (now invalid) location, and not to the
 * null pointer.
 *
 * @param ptr
 *    Pointer to a memory block previously allocated with malloc(),
 *    calloc() or realloc() to be deallocated.  If a null pointer is
 *    passed as argument, no action occurs.
 */
void free(void *ptr) {
  // implement free

  if (ptr == NULL) {
    return;
  }

  metadata_t *meta = ptr - sizeof(metadata_t);

  printf("Freeing: %p Size: %d\n", meta, meta->size);

  metadata_t *curMeta = startOfHeap;
  metadata_t *prev = curMeta;
  while(curMeta != NULL) {
    if ((void *)curMeta + sizeof(metadata_t) + curMeta->size == meta && curMeta->isUsed == 0) {
      curMeta->size = curMeta->size + meta->size + sizeof(metadata_t);
      meta = curMeta;
    } else if ((void *)meta + sizeof(metadata_t) + meta->size == curMeta) {
      meta->size = meta->size + sizeof(metadata_t) + curMeta->size;
      meta->isUsed = 0;
      prev->next = meta;
      meta->next = curMeta->next;
      curMeta->next = NULL;
      curMeta = meta;
    } 
    prev = curMeta;
    curMeta = curMeta->next;
  }

  if (meta->isUsed == 1) {
    meta->isUsed = 0;
    metadata_t *start = startOfHeap;
    metadata_t *copy = start->next;
    start->next = meta;
    meta->next = copy;
  }

}